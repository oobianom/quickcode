# Other equations - Still need to build a story around each equation

#' #' Production Function (Cobb-Douglas)
#' #'
#' #' Calculate the output
#' #'
#' #' rdname economics
#' #' param Q output
#' #' param L labour output
#' #' param K caputal input
#' #' param A total factor
#' #' param alpha output elacticity
#' #' param beta output elasticity
#' #'
#' #'
#' #'
#' cobbDouglas <- function(Q, A, L, K, alpha, beta) {
#'   Q <- A * (L^alpha) * (K^beta)
#' }
#'
#'
#' #' Phillips Curve
#' #'
#' #'
#'
#' infrate <- function(eInf, a, u, u0, round = 2) {
#'   round(eInf - a(u - u0), round)
#' }
#'
#'
#' #' Laffer Curve
#' #'
#' #' Calculate tax revenue
#' #'
#' #' param T tax revenue
#' #' param R tax rate
#' #' param GDP gross domestic product
#' #'
#' #'
#'
#' lafferCurve <- function(T, R, GDP, round = 2) {
#'   x <- NA
#'   if (missing(T)) {
#'     x <- (R * GDP) / 2
#'   } else if (missing(Km)) x <- T * 2 / GDP
#'   round(x, round)
#' }
#'
#' #' Michaelis-Menten Equation
#' #'
#' #'
#'
#' MMk <- function(V, Vmax, S, Km, round = 2) {
#'   x <- NA
#'   if (missing(V)) {
#'     x <- Vmax * S / (Km + S)
#'   } else if (missing(Km)) x <- (Vmax * S / V) - S
#'   round(x, round)
#' }
#'
#' #' Henderson-Hasselbalch Equation
#' #'
#' #'
#' #'
#'
#' pHpKa <- function(pH, pKa, A, HA, round = 2) {
#'   x <- NA
#'   if (missing(pH)) {
#'     x <- pKa + log(A / HA)
#'   } else if (missing(pKa)) x <- pH - log(A / HA)
#'   round(x, round)
#' }
#'
#'
#'
#'
#' #' Lineweaver-Burk Equation (Double reciprocal plot)
#' #'
#' #'
#' #'
#'
#' linweaver <- function(V,Km,Vmax,S, round = 2) {
#'   x <- NA
#'   if (missing(V)) {
#'     x <- Vmax * s / (Km + S)
#'   } else if (missing(Km)) x <- (Vmax * S / (V)) - S
#'   round(x, round)
#' }



#' Temperature conversion and rounding
#'
#' Mulitple all the content of a vector
#'
#' @param ... the numeric values to multiply
#' @rdname temperature
#' @return multiple of all content
#'
#' @examples
#' # multiply 1 number
#'
#' @export
#' To convert from Celsius to Kelvin:
#' To convert from Fahrenheit to Kelvin:
#' toKelvin <- function(C, F) {
#'   a <- missing(F)
#'   b <- missing(C)
#'   if ({
#'     a + b
#'   } %in% c(0, 2)) {
#'     stop("Must enter only one of C or F, and not both. Check examples.")
#'   }
#'
#'   if (!a) (F - 32) * 5 / 9 + 273.15
#'   if (!b) C + 273.15
#' }
#'
#' #' To convert from Celsius to Fahrenheit:
#' #' To convert from Kelvin to Fahrenheit:
#' toFahrenheit <- function(C, K) {
#'   a <- missing(K)
#'   b <- missing(C)
#'   if ({
#'     a + b
#'   } %in% c(0, 2)) {
#'     stop("Must enter only one of C or K, and not both. Check examples.")
#'   }
#'
#'   if (!a) (K - 273.15) * 9 / 5 + 32
#'   if (!b) (C * 9 / 5) + 32
#' }
#'
#' #' To convert from Fahrenheit to Celsius:
#' #' To convert from Kelvin to Celsius:
#' toCelsius <- function(F, K) {
#'   a <- missing(F)
#'   b <- missing(K)
#'   if ({
#'     a + b
#'   } %in% c(0, 2)) {
#'     stop("Must enter only one of K or F, and not both. Check examples.")
#'   }
#'
#'   if (!a) (F - 32) * 5 / 9
#'   if (!b) K - 273.15
#' }
#'
#'
#'

# Future release
# Subtract elements from vector or minus two lists
#
#
#
# `%-%` <- function(item1,item2,return=FALSE){
#   if(!all(class(item1) == class(item2))) stop("Both variables must have the same class")
#   res <- "The variables have to be either two lists or two character vectors"
#   if(inherits(item1,"character"))
#   res <- item1[item1%nin%item2]
#   if(inherits(item1,"list"))
#   res <- mapply('-', item1, item2, SIMPLIFY = FALSE)
#   res
# }



# to-do v0.9
# function to track function usage
# type3 <-function(x)type1(x)
# type1 <- function(x){
#   mean(x)
#   sd(x)
#   tracker()
# }
#
# tracker <- function(apiId){
#   getCall<-as.character(sys.calls()[[length(sys.calls())-1]])
#   getFuncName <- strsplit(getCall,"\\(")[[1]][1]
#   print(getFuncName)
#   ls("package:quickcode")
# }


# get_calls <- function(filepath) {
#   code <- parse(filepath)
#   tokens <- as.list(code)
#   calls <- c()
#   while (TRUE) {
#     any_unpacked <- FALSE
#     for (ii in seq_along(tokens)) {
#       part <- tokens[[ii]]
#       # Calls always have the function name as the first element
#       if (is.call(part)) {
#         fun_token <- part[[1]]
#         calls <- c(calls, deparse(fun_token))
#       }
#       # Expressions have a length
#       if (length(part) > 1) {
#         tokens[[ii]] <- as.list(part)
#         any_unpacked <- TRUE
#       }
#     }
#     tokens <- unlist(tokens)
#     if (!any_unpacked) break
#   }
#   unique(calls)
# }

#assign(".pos80cbca8022ece6174797e10bb8aebf18", .pos80cbca8022ece6174797e10bb8aebf18, envir = .pos80cbca8022ece6174797e10bb8aebf18)
#lockBinding(".pos80cbca8022ece6174797e10bb8aebf18", env = .pos80cbca8022ece6174797e10bb8aebf18)
